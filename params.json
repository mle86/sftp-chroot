{
  "name": "sftp-chroot",
  "tagline": "Working home-chrooted sftp",
  "body": "This project aims to provide a working solution\r\nfor homedir-chrooted SFTP\r\nusing the openssh-server's **internal-sftp** subsystem\r\nand **automount**(8).\r\n\r\n\r\n## Goals\r\n\r\n* Have an **`sftp` user group**\r\n  which allows SFTP logins to its members\r\n  but prevents them from using regular SSH.\r\n\r\n* Force SFTP users to be **chroot**'ed\r\n  into their home directories\r\n  to isolate them from all other homes\r\n  and system directories.\r\n\r\n* Support **sub-accounts** with *User Private Groups*\r\n  (see below for an example).\r\n\r\n* Minimal configuration –\r\n  the installation should set up everything by itself.\r\n\r\n* No administrative overhead –\r\n  there should be no need, say, to change the way how users are added to the system.\r\n\r\n* Have consistent path names:\r\n  The `pwd` SFTP command should still show the real homedir path.\r\n\r\n\r\n### Sub accounts\r\n\r\nTo give an example of the kind of *sub accounts*\r\nthis solution supports:\r\n\r\n* Main account `uid=1000(mle) gid=1000(mle) groups=(1000)mle,(500)sftp`  \r\n  with homedir `/home/mle`  \r\n  should be able to access /home/mle via SFTP, including all sub-directories.\r\n\r\n* Sub account `uid=1001(mle-sub) gid=1000(mle) groups=(1000)mle,(500)sftp`  \r\n  with homedir `/home/mle/sub`  \r\n  should be able to access /home/mle/sub via SFTP, but NOT the rest of /home/mle.\r\n\r\n* Those accounts should be the owners of their respective homedirs.\r\n\r\nIf both accounts have a umask like `002`,\r\nthen the main account can access the sub account's files and directories.\r\nThe sub account however should be **prevented from leaving their own homedir.**\r\n\r\n\r\n## Ownership problem\r\n\r\nWhile the `internal-sftp` sshd subsystem allows \"lightweight\" chrooting,\r\nthat is, without requiring /dev/null, /bin/sh, etc,\r\nit still comes with a serious restriction:  \r\nThe chroot dir has to be owned by `root`.\r\n\r\nWe don't want to force our users to have root-owned homedirs.\r\nThat means that an *sshd_config* directive like `ChrootDirectory %h` won't work.\r\n(Also, the resulting directory hierarchy would look weird to the SFTP users:\r\n their homedir would appear to be located at `/`.)\r\n\r\nWe'll have to build an additional hierarchy for every user:  \r\nA root-owned directory like `/jail/USERNAME` can be used as one user's chroot filesystem.\r\nIn there, they should find their homedir (and nothing more).\r\nSymlinks won't work for that (they'd be evaluated *inside* the chroot filesystem, leading nowhere),\r\nand not even root is allowed to create directory hardlinks.\r\n\r\n\r\n## Bind mounts to the rescue\r\n\r\n*Bind mounts* are a way to have **one directory in two places**,\r\nsort of like temporary directory hardlinks.\r\n\r\nFor example, this bind mount makes my home directory available at a second location:\r\n```\r\n$ ls -ld /mnt\r\ndrwxr-xr-x   2 root root 4,0K Jul 19  2015 /mnt/\r\n# mount --bind  $HOME /mnt\r\n$ ls -ld /mnt\r\ndrwxr-x---+ 77 mle  mle  4,0K Jun  2 00:20 /mnt/\r\n```\r\nAs can be seen,\r\n**the secondary location now has the same ownership and mode as my \"real\" homedir.**\r\nThose two directories are now equal in every way.\r\nIt will last until /mnt gets unmounted or the machine reboots.\r\n\r\n\r\n### Security problems with bind mounts\r\n\r\nThey also pose a security risk if applied too carelessly.  \r\nUsually, setting one's homedir mode to `0700` is sufficient to protect all of its contents.\r\nEven subdirectories and files with permissive modes like `0777` are still totally safe from other users\r\nsimply because nobody can enter such a homedir at all.\r\n\r\n**Bind mounts circumvent this,**\r\njust like hardlinks do!\r\n\r\nFor example:\r\n```\r\n# ls -la /root\r\ndrwx------  25 root root 4,0K Jun  2 01:09 /root/   # No one can get in here.\r\ndrwxrwxrwx   2 root root 4,0K Jun  2 01:09 /root/secrets/   # Perfectly safe, right?\r\n# mount --bind /root/secrets /mnt\r\n$ ls -ld /mnt\r\ndrwxrwxrwx   2 root root 4,0K Jun  2 01:09 /mnt/   # Oops!\r\n```\r\n\r\nBecause `/mnt` can be reached by everyone (because `/` is, of course, unrestricted),\r\neverybody can now effectively enter `/root/secrets/`.\r\nIt is no longer protected by `/root/`'s restrictive mode.\r\n\r\nIt is therefore root's responsibility to be very careful with bind mounts in general,\r\nbecause they can be used to circumvent the mode restrictions of nested directories.\r\n\r\n\r\n## Using bind mounts for ssh chrooting\r\n\r\nKeeping this problem in mind,\r\nwe can create bind mounts to homedirs\r\nin root-owned locations.\r\nThis evades *internal-sftp*'s restriction that the chroot dir must be root-owned:\r\nWe can duplicate the `/home` hierarchy for one user inside their personal chroot filesystem.\r\n\r\nWe start by creating a base directory `/jail` for our bind mount points\r\nwhich is owned by root and has very restrictive modes,\r\nso no one can enter it.\r\n(This will still work because *internal-sftp* runs as `root` prior to chrooting,\r\ntherefore it can enter the /jail directory,\r\nwhereas logged-in non-root users cannot.)\r\n\r\n```\r\n# mkdir  -m 0700  /jail\r\n```\r\n\r\nNow assume we want to allow chrooted SFTP logins for the `mle-sub` user.\r\nTheir homedir is `/home/mle/sub`.\r\n\r\n```\r\n# mkdir -p /jail/mle-sub/home/mle/sub   # all owned by root\r\n# mount --bind  /home/mle/sub  /jail/mle-sub/home/mle/sub\r\n```\r\n\r\nThe chroot dir `/jail/mle-sub` is owned by root,\r\ntherefore *internal-sftp* will accept it.\r\nInside it, there'a a duplicate of the user's homedir and nothing else.\r\nThat homedir duplicate is linked with the *real* homedir,\r\nso it really has the same permissions, ownership, and of course content.\r\n\r\n\r\n## Getting sshd on board\r\n\r\nAppending this block to `/etc/ssh/sshd_config`\r\ntells *sshd* that all members of the `sftp` group\r\nare to be chrooted and can only ever use SFTP:\r\n\r\n```\r\nMatch group sftp\r\n    ChrootDirectory /jail/%u   # sshd will replace %u with the username.\r\n    ForceCommand internal-sftp\r\n```\r\n\r\n\r\n## So far so good\r\n\r\nNow w the user `mle-sub` establishes a SFTP connection,\r\n*internal-sftp* will first chroot the session to `/jail/mle-sub`,\r\nwhich works because those directories both belong to root.  \r\nAs usual, it will then try to change into the user's homedir,\r\nwhich is `/home/mle/sub`.\r\nInside the chroot jail, that directory exists too, so the directory change succeeds.\r\n`home` and `home/mle` are only empty, non-writable directories inside the jail,\r\nso the user cannot do any harm there,\r\nwhile `home/mle/sub` is a bind link to the *real* homedir.\r\n\r\nThe user ends up with an SFTP session inside their own home directory –\r\nor at least that's what it'll look like.\r\nEscaping that homedir with `cd ..` will only land them in an empty, non-writable directory,\r\nnot in the real `/home/mle`.\r\n\r\nSuccess!\r\n\r\n\r\n## Too many mounts\r\n\r\nTo enable SFTP logins for *all* `sftp` group members,\r\nwe'd have to do this for every one of them:\r\n\r\n1. Replicate their homedir structure inside */jail*  \r\n   (`# mkdir -p /jail/$username/$homedir`)\r\n1. Bind mount their homedir to the fake homedir inside the jail  \r\n   (`# mount --bind $homedir /jail/$username/$homedir`)\r\n\r\nAnd of course, we'd have to do this after every reboot, because bind mounts are not durable.\r\n\r\nWe could enter all of them into our `/etc/fstab`,\r\nbut after a few dozen sub-accounts\r\nboth that file and `mtab` would get quite cluttered.\r\nApart from that, it would necessitate changes to `/etc/fstab` every time a `sftp` user gets added, deleted, or has their homedir changed.\r\n\r\nWhat if the system could automatically create and mount those directories when needed,\r\nunmounting and removing them again after the SFTP session ended?\r\n\r\n\r\n## Enter autofs\r\n\r\nThe *autofs* package contains the *automount(8)* daemon and a the *autofs4* kernel module.\r\nIts configuration files go in `/etc/auto.master.d/`\r\n(which might have to be created first).\r\n\r\nWe'll add our own configuration there:\r\n```\r\n$ cat /etc/auto.master.d/jails.autofs\r\n/jail program:/etc/autofs-sftp-jails.sh --timeout=20\r\n```\r\n\r\nThis oneliner basically says that\r\nwhenever someone tries to enter a non-existing directory in `/jail/`,\r\n*automount* should call our *autofs-sftp-jails.sh* script\r\nwhich should then determine where to mount that directory from.\r\n\r\nThe *autofs-sftp-jails.sh* receives the non-existing relative directory as its first argument.\r\n(Since only *internal-sftp* will ever enter `/jail`\r\n and we configured it to chroot the users to `/jail/%u`,\r\n we know that the *autofs-sftp-jails.sh* script will always receive **the username of the SFTP user** as its first argument.)\r\n\r\nWith that, the script performs several security checks first:\r\n\r\n1. Making sure that `/jail` belongs to root and has a restrictive mode (`0700`),\r\n   so that no one can go there to circumvent homedir access restrictions.\r\n1. Making sure that the `$1` username actually exists and has an existing homedir.\r\n1. Making sure that the user's homedir is actually a directory, **not a symlink**,\r\n   or autofs will happily create a bind link to the link target (!).\r\n\r\nIf everything looks good,\r\nthe script echoes a single configuration line for the *automount* daemon like this:\r\n\r\n```sh\r\necho \"-fstype=bind  \\\"/$homedir\\\" \\\":$homedir\\\"\"\r\n```\r\n\r\nLet's break that down:\r\n\r\n1. `-fstype=bind` – pretty self-explanatory.\r\n   (*automount*'s default filesystem is NFS.)\r\n1. `\"/$homedir\"` – this tells *automount* which mount point to create/use.\r\n   It is relative to the non-existing directory which triggered the script,\r\n   so it'll be expanded to `/jail/$username/$homedir`.\r\n1. `\":$homedir\"` – this tells *automount* where to find the mount target.\r\n\r\nEffectively, this means that as soon as the `mle-sub` user logs in via SFTP,\r\n*internal-sftp* will chroot them to `/jail/mle-sub`.\r\nThis directory does not yet exist, triggering the *automount* daemon,\r\nwhich will then create a bind mount\r\nat `/jail/mle-sub/home/mle/sub` leading to the real `/home/mle/sub`.  \r\n(The intermediary path components are automagically created, belonging to root with a mode of `0755`, so thankfully our script won't have to do that.)\r\nThe SFTP user will end up in `/jail/mle-sub/home/mle/sub`\r\nwhich to them looks and feels like the real `/home/mle/sub`\r\nyet is completely isolated from the rest of the `/home/mle` tree.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}